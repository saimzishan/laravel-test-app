<?php

namespace App\Http\Controllers\Stripe;

use App\Firm;
use App\Http\Libraries\HelperLibrary;
use App\Http\Libraries\StripeLibrary;
use App\Mail\FirmDisconnectNotification;
use App\Promotion;
use App\PromotionShiftRequest;
use Carbon\Carbon;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Log;

class PaymentController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $data['firm'] = Firm::find(HelperLibrary::getFirmID());
        return view("stripe.create", $data);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $stripe = new StripeLibrary(HelperLibrary::getFirmID());
        try {
            $success = true;
            $firm = Firm::find(HelperLibrary::getFirmID());
            $qty = $firm->getPaymentUsers();
            $checkPromotion = Promotion::notDeleted()
                ->where("start_date", "<=", (new Carbon($firm->created_at))->format("Y-m-d"))
                ->where("end_date", ">=", (new Carbon($firm->created_at))->format("Y-m-d"))
                ->first();
            if ($checkPromotion != null) {
                $subscription = $checkPromotion->stripe_plan_id;
                PromotionShiftRequest::create([
                    "promotion_id" => $checkPromotion->id,
                    "firm_id" => $firm->id,
                    "subscription_from" => $subscription,
                    "subscription_to" => "ftt_monthly",
                    "end_date" => (new Carbon($firm->created_at))->addDays($checkPromotion->validity)->format("Y-m-d"),
                ]);
            } else {
                $subscription = "ftt_monthly_all";
            }
            $firm->newSubscription('main', $subscription)->quantity($qty)->create($request->stripe_token, [
                'email' => $request->customer['email'],
                'name' => $request->customer['name'],
                'phone' => $request->phone_number,
                'address' => [
                    "line1" => $request->customer['address_line1'],
                    "city" => $request->customer['address_city'],
                    "state" => $request->customer['address_state'],
                    "postal_code" => $request->customer['address_zip'],
                ],
                "description" => "Firm: " . HelperLibrary::getFirm()->name ." (Generated By firmTRAK Visualize)"
            ]);
            $firm->trial_ends_at = null;
            $firm->no_of_users = $qty;
            $firm->is_active = true;
            $firm->subscribe_email = $request->customer['email'];
            $firm->subscribe_user_name = $request->customer['name'];
            $firm->save();
            $stripe->subscribeUser();
//            if($firm->subscribe_email != null and $firm->subscribe_user_name != null) {
//                Mail::to($firm->subscribe_email)->queue(new FirmDisconnectNotification($firm));
//            }
            //dd($stripe);
        } catch (\Exception $e) {
            Log::channel("payment_exception_log")->info("Firm Id : ".HelperLibrary::getFirmID()." Date Time :".date("Y-m-d H:i:s")." ".$e);
            $success = false;
        }

        return response()->json([
            "success" => $success
        ]);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
